version: '3.8'

services:
  # Main application backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://loyalty_user:loyalty_password@db:5432/loyalty_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      # Logic ERP Integration (MSSQL)
      - ERP_HOST=erp_db
      - ERP_PORT=1433
      - ERP_DATABASE=master
      - ERP_USERNAME=sa
      - ERP_PASSWORD=ATPL@123
      - ERP_API_KEY=${ERP_API_KEY}
      - ERP_DRIVER=ODBC Driver 17 for SQL Server
      # WhatsApp Integration (optional)
      - WHATSAPP_API_URL=${WHATSAPP_API_URL}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      # Email Configuration
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@yourcompany.com}
      # JWT Configuration
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
    depends_on:
      - db
      - redis
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/static:/app/static
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-http://localhost:8000/api/v1}
      - REACT_APP_ENVIRONMENT=production
      - NODE_ENV=production
    depends_on:
      - backend
    volumes:
      - ./frontend/build:/app/build
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL database (Loyalty System)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=loyalty_db
      - POSTGRES_USER=loyalty_user
      - POSTGRES_PASSWORD=loyalty_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loyalty_user -d loyalty_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microsoft SQL Server (Logic ERP)
  erp_db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=ATPL@123
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - erp_data:/var/opt/mssql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ATPL@123 -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Monitoring and logging
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    ports:
      - "9090:9090"  # Prometheus
      - "3001:3001"  # Grafana
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - backend
      - db
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

  # Background job worker (Celery)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://loyalty_user:loyalty_password@db:5432/loyalty_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      # Logic ERP settings for background tasks
      - ERP_HOST=erp_db
      - ERP_PORT=1433
      - ERP_DATABASE=master
      - ERP_USERNAME=sa
      - ERP_PASSWORD=ATPL@123
      - ERP_DRIVER=ODBC Driver 17 for SQL Server
      # WhatsApp settings for background tasks
      - WHATSAPP_API_URL=${WHATSAPP_API_URL}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A app.worker.celery_app worker --loglevel=info

  # Scheduled tasks (Celery Beat)
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    environment:
      - DATABASE_URL=postgresql://loyalty_user:loyalty_password@db:5432/loyalty_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      # Logic ERP settings for scheduled tasks
      - ERP_HOST=erp_db
      - ERP_PORT=1433
      - ERP_DATABASE=master
      - ERP_USERNAME=sa
      - ERP_PASSWORD=ATPL@123
      - ERP_DRIVER=ODBC Driver 17 for SQL Server
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A app.worker.celery_app beat --loglevel=info

volumes:
  postgres_data:
  erp_data:
  redis_data:
  grafana_data: